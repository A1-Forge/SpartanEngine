/*
Copyright(c) 2016-2017 Panos Karabelas

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

//= INCLUDES ===================
#include "D3D12Texture.h"
#include "D3D12GraphicsDevice.h"
#include "../../Logging/Log.h"
//==============================

//= NAMESPAECES ====
using namespace std;
//==================

namespace Directus
{
	D3D12Texture::D3D12Texture(D3D12GraphicsDevice* graphics) : m_graphics(graphics)
	{
		m_format = DXGI_FORMAT_R8G8B8A8_UNORM;
		m_mipLevels = 1;
	}


	D3D12Texture::~D3D12Texture()
	{

	}

	// Creates a texture with no mipchain
	bool D3D12Texture::Create(int width, int height, int channels, unsigned char* data)
	{
		//m_mipLevels = 1;

		//ID3D12Resource* m_texture;
		//ID3D12GraphicsCommandList* m_commandList;
		//ID3D12Resource* textureUploadHeap;

		//// Create the texture.
		//	// Describe and create a Texture2D.
		//D3D12_RESOURCE_DESC textureDesc = {};
		//textureDesc.MipLevels = 1;
		//textureDesc.Format = DXGI_FORMAT_R8G8B8A8_UNORM;
		//textureDesc.Width = width;
		//textureDesc.Height = height;
		//textureDesc.Flags = D3D12_RESOURCE_FLAG_NONE;
		//textureDesc.DepthOrArraySize = 1;
		//textureDesc.SampleDesc.Count = 1;
		//textureDesc.SampleDesc.Quality = 0;
		//textureDesc.Dimension = D3D12_RESOURCE_DIMENSION_TEXTURE2D;

		//HRESULT result = m_graphics->GetDevice()->CreateCommittedResource(
		//	&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_DEFAULT),
		//	D3D12_HEAP_FLAG_NONE,
		//	&textureDesc,
		//	D3D12_RESOURCE_STATE_COPY_DEST,
		//	nullptr,
		//	IID_PPV_ARGS(&m_texture));

		//if (FAILED(result))
		//{
		//	LOG_INFO("Failed to create commited resource.");
		//	return false;
		//}

		//const unsigned int64 uploadBufferSize = GetRequiredIntermediateSize(m_texture.Get(), 0, 1);

		//// Create the GPU upload buffer.
		//result = m_graphics->GetDevice()->CreateCommittedResource(
		//	&CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD),
		//	D3D12_HEAP_FLAG_NONE,
		//	&CD3DX12_RESOURCE_DESC::Buffer(uploadBufferSize),
		//	D3D12_RESOURCE_STATE_GENERIC_READ,
		//	nullptr,
		//	IID_PPV_ARGS(&textureUploadHeap));

		//if (FAILED(result))
		//{
		//	LOG_INFO("Failed to create commited resource.");
		//	return false;
		//}

		//// Copy data to the intermediate upload heap and then schedule a copy 
		//// from the upload heap to the Texture2D.
		//vector<unsigned int8> texture = GenerateTextureData();

		//D3D12_SUBRESOURCE_DATA textureData = {};
		//textureData.pData = &texture[0];
		//textureData.RowPitch = width * TexturePixelSize;
		//textureData.SlicePitch = textureData.RowPitch * height;

		//UpdateSubresources(m_commandList.Get(), m_texture.Get(), textureUploadHeap.Get(), 0, 0, 1, &textureData);
		//m_commandList->ResourceBarrier(1, &CD3DX12_RESOURCE_BARRIER::Transition(m_texture.Get(), D3D12_RESOURCE_STATE_COPY_DEST, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE));

		//// Describe and create a SRV for the texture.
		//D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc = {};
		//srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
		//srvDesc.Format = textureDesc.Format;
		//srvDesc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;
		//srvDesc.Texture2D.MipLevels = 1;
		//m_graphics->GetDevice()->CreateShaderResourceView(m_texture.Get(), &srvDesc, m_srvHeap->GetCPUDescriptorHandleForHeapStart());

		return false;
	}

	// Creates a texture and generates a mipchain for it. Good for when you need a mipchain with 
	// no extra trouble, not so fast as the texture generated by a predefined mipchain though.
	bool D3D12Texture::CreateAndGenerateMipchain(int width, int height, int channels, unsigned char* data)
	{
		return false;
	}

	// Creates a texture from a predefined mipchain. This is the fastest performing type of texture that also includes a mipchain.
	bool D3D12Texture::CreateFromMipchain(int width, int height, int channels, const vector<vector<unsigned char>>& mipchain)
	{
		return false;
	}
}